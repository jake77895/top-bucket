<script>
function renderChart(nodesData, nodeDataMap, exitOpportunitiesMapping) {
const data = [
  {
    category: "Hedge Fund",
    nodes: [
      { id: 11, name: "Junior Analyst", level: 1 },
      { id: 12, name: "Research Associate", level: 2 },
      { id: 13, name: "Fund Analyst", level: 3 },
      { id: 14, name: "Sector Head", level: 4 },
      { id: 15, name: "Portfolio Manager", level: 5 },
    ],
    links: [],
  },
  {
    category: "Venture Capital",
    nodes: [
      { id: 1, name: "Analyst", level: 1 },
      { id: 2, name: "Pre-MBA associate", level: 2 },
      { id: 3, name: "Senior associate", level: 3 },
      { id: 4, name: "Principal", level: 4 },
      { id: 5, name: "Partner", level: 5 },
    ],
    links: [],
  },
  {
    category: "Private Credit",
    nodes: [
      { id: 41, name: "Analyst", level: 1 },
      { id: 42, name: "Associate", level: 2 },
      { id: 43, name: "Vice president", level: 3 },
      { id: 44, name: "Principal", level: 4 },
      { id: 45, name: "Partner", level: 5 },
    ],
    links: [],
  },
  {
    category: "Private Equity",
    nodes: [
      { id: 6, name: "Analyst", level: 1 },
      { id: 7, name: "Associate", level: 2 },
      { id: 8, name: "Vice president", level: 3 },
      { id: 9, name: "Principal", level: 4 },
      { id: 10, name: "Partner", level: 5 },
    ],
    links: [],
  },
  {
    category: "Investment Banking",
    nodes: [
      { id: 16, name: "Analyst", level: 1 },
      { id: 17, name: "Associate", level: 2 },
      { id: 18, name: "Vice president", level: 3 },
      { id: 19, name: "Senior vice president", level: 4 },
      { id: 20, name: "Managing director", level: 5 },
    ],
    links: [],
  },
  {
    category: "Corporate Development",
    nodes: [
      { id: 21, name: "Analyst", level: 1 },
      { id: 22, name: "Associate", level: 2 },
      { id: 23, name: "Manager", level: 3 },
      { id: 24, name: "Director", level: 4 },
      { id: 25, name: "Vice president", level: 5 },
    ],
    links: [],
  },
  {
    category: "Investment Management", // New category
    nodes: [
      { id: 26, name: "Analyst", level: 1 },
      { id: 27, name: "Associate", level: 2 },
      { id: 28, name: "Senior Associate", level: 3 },
      { id: 29, name: "Portfolio Manager", level: 4 },
      { id: 30, name: "Director", level: 5 },
    ],
    links: [],
  },
  {
    category: "FP&A",
    nodes: [
      { id: 31, name: "Analyst", level: 1 },
      { id: 32, name: "Senior Analyst", level: 2 },
      { id: 33, name: "Manager", level: 3 },
      { id: 34, name: "Director", level: 4 },
      { id: 35, name: "Vice president", level: 5 },
    ],
    links: [],
  },
  {
    category: "Other",
    nodes: [
      { id: 36, name: "Entry Level", level: 1 },
      { id: 37, name: "Mid Level", level: 2 },
      { id: 38, name: "Senior Level", level: 3 },
      { id: 39, name: "Lead", level: 4 },
      { id: 40, name: "Executive", level: 5 },
    ],
    links: [],
  },
];

let selectedCategory = "Investment Banking"; // Initialize with default category

// At the start of your renderChart function, reorder the data array
data.sort((a, b) => {
  const order = {
    "Hedge Fund": 1,
    "Venture Capital": 2,
    "Private Credit": 3,
    "Private Equity": 4,
    "Investment Banking": 5,
    "Corporate Development": 6,
    "Investment Management": 7,
    "FP&A": 8
  };
  return (order[a.category] || 999) - (order[b.category] || 999);
});

  // Ensure links are rendered only if data exists
// Function to render links based on provided link data
function renderLinks(svg, linkData, nodeDataMap, levelSpacing) {
  // Ensure linkData exists and is an array
  if (!Array.isArray(linkData) || linkData.length === 0) {
    console.warn("No link data available for rendering.");
    return;
  }

  console.log(`Rendering ${linkData.length} links...`);

  const group = svg.append("g").attr("class", "links-group");

  // Render links
  group
    .selectAll(".link")
    .data(linkData)
    .enter()
    .append("line")
    .attr("class", "link")
    .attr("x1", 0)
    .attr("y1", (d) => {
      const sourceNode = nodeDataMap[d.source];
      if (!sourceNode) {
        console.error(`Source node with ID ${d.source} not found.`);
        return 0; // Default to 0 to avoid errors
      }
      return (sourceNode.level - 1) * levelSpacing;
    })
    .attr("x2", 0)
    .attr("y2", (d) => {
      const targetNode = nodeDataMap[d.target];
      if (!targetNode) {
        console.error(`Target node with ID ${d.target} not found.`);
        return 0; // Default to 0 to avoid errors
      }
      return (targetNode.level - 1) * levelSpacing;
    })
    .attr("stroke", "#333")
    .attr("stroke-width", 2)
    .attr("marker-end", "url(#arrowhead-solid)")
    .style("cursor", "pointer")
    .on("click", function (event, d) {
      // Show modal with link data
      console.log("Link clicked:", d);

      // Update modal content
      document.getElementById("modal-source").textContent =
        nodeDataMap[d.source]?.name || "N/A";
      document.getElementById("modal-target").textContent =
        nodeDataMap[d.target]?.name || "N/A";
      document.getElementById("modal-avg-salary").textContent = `${
        d.avg_salary?.toLocaleString() || "N/A"
      }`;
      document.getElementById("modal-avg-bonus").textContent = `${
        d.avg_bonus?.toLocaleString() || "N/A"
      }`;
      document.getElementById("modal-avg-total-comp").textContent = `${
        d.avg_total_comp?.toLocaleString() || "N/A"
      }`;
      document.getElementById("modal-avg-comp-per-hour").textContent = `${
        d.avg_comp_per_hour?.toFixed(2) || "N/A"
      }`;

      // Show the modal using Bootstrap
      new bootstrap.Modal(document.getElementById("linkModal")).show();
    });
}


  const width = Math.max(window.innerWidth, data.length * 200)+100;
  const height = 750;
  const margin = { top: 100, right: 50, bottom: 50, left: 50 };
  const levelSpacing = (height - margin.top - margin.bottom) / 5;
  const categoryWidth = width / data.length;
  const buttonHeight = 40;

  // Define colors for normal highlighting, exit opportunities, and defaults
  const highlightColor = "#fff";
  const defaultColor = "#6F6F6F";
  const highlightStroke = "#ccc";
  const defaultStroke = "#ccc";
  const likelyExitColor = "#0d6efd";      // Darker blue for likely exits
  const possibleExitColor = "#deebf7";    // Keeping the light blue for possible exits
  const exitOpportunityStroke = "#ccc";  // Blue stroke for exit nodes

    // Mapping of exit opportunities by category.
  // For Investment Banking, node with id 7 (Private Equity Associate) is considered an exit opportunity.
  


  const svg = d3
    .select("#chart")
    .append("svg")
    .attr("id", "career-tree")
    
    .attr("width", width)
    .attr("height", 750)
    .style("font-family", "Arial");


  // Add category buttons
  data.forEach((categoryData, i) => {
    // Add button rectangle
    svg
      .append("rect")
      .attr("x", i * categoryWidth + categoryWidth / 2 - 100)
      .attr("y", margin.top - 60)
      .attr("width", 200)
      .attr("height", buttonHeight)
      .attr("rx", 20)
      .attr("ry", 20)
      .attr("fill", "#f8f9fa")
      .attr("stroke", "#ccc")
      .attr("stroke-width", 1)
      .attr("class", "career_tree_industry_button") // External styling for buttons
              // Highlight nodes in this category
              .on("click", () => {
    // Update selected category
    selectedCategory = categoryData.category;
    console.log("Selected category:", selectedCategory);

    d3.selectAll(".node").select("circle")
        .attr("fill", function () {
            const nodeData = d3.select(this).datum();
            
            // Check if this is a primary node for the current category
            const isPrimary = categoryData.nodes.some((n) => n.id === nodeData.id);
            
            // Find matching exit opportunity
            const exitOpp = exitOpportunitiesMapping[categoryData.category]?.find(exit => 
                exit.node_id === nodeData.id
            );
            
            if (isPrimary) {
                return highlightColor;  // White for primary nodes
            } else if (exitOpp) {
                return exitOpp.likelihood === 1 ? likelyExitColor : possibleExitColor;  // Blue for likelihood 1, Red for likelihood 2
            } else {
                return defaultColor;  // Grey for other nodes
            }
        })
        .attr("stroke", function () {
            const nodeData = d3.select(this).datum();
            const isPrimary = categoryData.nodes.some((n) => n.id === nodeData.id);
            const exitMapping = exitOpportunitiesMapping[categoryData.category];
            const isExit = exitMapping && exitMapping.some(exitObj => exitObj.node_id === nodeData.id);
            
            if (isPrimary) {
                return highlightStroke;
            } else if (isExit) {
                return exitOpportunityStroke;
            } else {
                return defaultStroke;
            }
        });
});


    // Add button text with external styling
    const textElement = svg
      .append("text")
      .attr("x", i * categoryWidth + categoryWidth / 2)
      .attr("y", margin.top - 40)
      .attr("class", "career_tree_industry_button_text") // External class
      .text(categoryData.category);

    // Optional: Raise text to be above the rectangle
    textElement.raise();
  });

    const levelIconPaths = {
    1: "<%= asset_path('icons/career_tree_icons/level_1.svg') %>",
    2: "<%= asset_path('icons/career_tree_icons/level_2.svg') %>",
    3: "<%= asset_path('icons/career_tree_icons/level_3.svg') %>",
    4: "<%= asset_path('icons/career_tree_icons/level_4.svg') %>",
    5: "<%= asset_path('icons/career_tree_icons/level_5.svg') %>",
  };

  const defs = svg.append("defs");

  // Add markers for links
  defs
    .append("marker")
    .attr("id", "arrowhead-solid")
    .attr("viewBox", "0 0 10 10")
    .attr("refX", 25)
    .attr("refY", 5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
    .append("path")
    .attr("d", "M 0 0 L 10 5 L 0 10 Z")
    .attr("fill", "#333");

  const nodePositions = {};

  // Render nodes and links
  data.forEach((categoryData, i) => {
    const group = svg
      .append("g")
      .attr("transform", `translate(${i * categoryWidth + categoryWidth / 2}, ${margin.top + 50})`);



    // Add links
    group
      .selectAll(".link")
      .data(categoryData.links)
      .enter()
      .append("line")
      .attr("x1", 0)
      .attr("y1", (d) => (categoryData.nodes.find((n) => n.id === d.source).level - 1) * levelSpacing)
      .attr("x2", 0)
      .attr("y2", (d) => (categoryData.nodes.find((n) => n.id === d.target).level - 1) * levelSpacing)
      .attr("stroke", "#333")
      .attr("stroke-width", 2)
      .attr("marker-end", "url(#arrowhead-solid)");

    // Add nodes
  const nodes = group
    .selectAll(".node")
    .data(categoryData.nodes)
    .enter()
    .append("g")
    .attr("class", "node")
    .attr("transform", (d) => {
      const x = i * categoryWidth + categoryWidth / 2;
      const y = (d.level - 1) * levelSpacing;
      nodePositions[d.id] = { x, y }; // Store for links
      return `translate(0, ${y})`;
    });

    nodes
      .append("circle")
      .attr("r", 20)
      .attr("stroke", defaultStroke)
      .attr("stroke-width", 2)
      .attr("fill", defaultColor);

      

    // Add level-specific icons
    const levelIconPaths = {
      1: "<%= asset_path('icons/career_tree_icons/level_1.svg') %>",
      2: "<%= asset_path('icons/career_tree_icons/level_2.svg') %>",
      3: "<%= asset_path('icons/career_tree_icons/level_3.svg') %>",
      4: "<%= asset_path('icons/career_tree_icons/level_4.svg') %>",
      5: "<%= asset_path('icons/career_tree_icons/level_5.svg') %>",
    };

    Object.entries(levelIconPaths).forEach(([level, path]) => {
      nodes
        .filter((d) => d.level === +level)
        .append("image")
        .attr("href", path)
        .attr("width", 24)
        .attr("height", 24)
        .attr("x", -12)
        .attr("y", -12);
    });

    // Add text and rectangle background
    nodes.each(function (d) {
      const group = d3.select(this);

      // Append the text element
      const textElement = group
        .append("text")
        .attr("text-anchor", "middle")
        .attr("dy", 35) // Position the text below the node
        .text(d.name);

      // Get the text dimensions
      const textWidth = textElement.node().getComputedTextLength();
      const textHeight = 12; // Approximate height for text

      // Insert a rectangle behind the text
      group
        .insert("rect", "text")
        .attr("x", -textWidth / 2 - 5) // Center the rectangle
        .attr("y", 35 - textHeight / 2 - 2) // Position the rectangle
        .attr("width", textWidth + 10) // Add padding
        .attr("height", textHeight) // Add padding
        .attr("rx", 4) // Rounded corners
        .attr("ry", 4) // Rounded corners
        .attr("fill", "white") // Background color
        .attr("opacity", 1); // Ensure it is visible

        group.style("cursor", "pointer").on("click", () => {
  const nodeData = nodeDataMap[d.id] || {};
  
  // Check if this node is an exit opportunity in any category
  const isExit = Object.entries(exitOpportunitiesMapping).some(([category, exits]) => 
    exits && exits.some(exit => exit.node_id === d.id)
  );
  
  console.log("Node clicked:", d);
  console.log("Node data:", nodeData);
  console.log("Is exit node:", isExit);
  console.log("Selected category:", selectedCategory);
  console.log("Exit opportunities mapping:", exitOpportunitiesMapping);

  // Update modal content (same for both modals)
  ["", "-exits"].forEach(suffix => {
    document.getElementById(`modal-industry${suffix}`).textContent = nodeData.industry || "N/A";
    document.getElementById(`modal-level${suffix}`).textContent = nodeData.name || "N/A";
    document.getElementById(`modal-record-count${suffix}`).textContent = nodeData.record_count || "0";
    document.getElementById(`modal-avg-salary${suffix}`).textContent = `$${Math.round(nodeData.salary || 0).toLocaleString()}`;
    document.getElementById(`modal-avg-bonus${suffix}`).textContent = `$${Math.round(nodeData.bonus || 0).toLocaleString()}`;
    document.getElementById(`modal-avg-total-comp${suffix}`).textContent = `$${Math.round(nodeData.total_comp || 0).toLocaleString()}`;
    document.getElementById(`modal-avg-comp-per-hour${suffix}`).textContent = `$${Math.round(nodeData.comp_per_hour || 0).toLocaleString()}`;
  });

  if (isExit) {
    const exitMapping = exitOpportunitiesMapping[selectedCategory]?.find(exit => exit.node_id === d.id);
    if (exitMapping) {
      console.log("Fetching exit details for mapping:", exitMapping);
      fetch(`/career_data/exit_details/${exitMapping.id}`)
        .then(response => response.json())
        .then(data => {
          console.log("Received exit details:", data);
          const mapping = data[0];
          if (mapping) {
            console.log("Updating modal with mapping:", mapping);
            updateModalContent(mapping);
            const modal = new bootstrap.Modal(document.getElementById('nodeModalExits'));
            modal.show();
          } else {
            console.warn("No mapping found in response data");
          }
        })
        .catch(error => {
          console.error("Error fetching exit details:", error);
        });
    }
  } else {
    // Regular node modal
    const modal = new bootstrap.Modal(document.getElementById('nodeModal'));
    modal.show();
  }
});
    });

    // After your initial node creation and before the category click handlers
    // Initialize with Investment Banking selected
    const investmentBankingData = data.find(d => d.category === "Investment Banking");
    if (investmentBankingData) {
      d3.selectAll(".node").select("circle")
        .attr("fill", function () {
          const nodeData = d3.select(this).datum();
          
          // Check if this is a primary node
          const isPrimary = investmentBankingData.nodes.some((n) => n.id === nodeData.id);
          
          // Find matching exit opportunity
          const exitOpp = exitOpportunitiesMapping["Investment Banking"]?.find(exit => 
            exit.node_id === nodeData.id
          );
          
          if (isPrimary) {
            return highlightColor;
          } else if (exitOpp) {
            return exitOpp.likelihood === 1 ? likelyExitColor : possibleExitColor;
          } else {
            return defaultColor;
          }
        });
    }

    

    
  });

  

  // Add this at the end of your renderChart function, just before the chartRendered event
  document.addEventListener("chartRendered", () => {
    // Get the chart container
    const chartContainer = document.getElementById("chart");
    
    // Calculate halfway point of the scroll width
    const halfwayPoint = (chartContainer.scrollWidth - chartContainer.clientWidth) / 2;
    
    // Set the scroll position
    chartContainer.scrollLeft = halfwayPoint;
  });

  document.dispatchEvent(new Event("chartRendered"));
}

function updateModalContent(mapping) {
  const companiesAccordion = document.getElementById('companiesAccordionExits');
  
  if (!companiesAccordion) {
    console.error('Could not find companies accordion element');
    return;
  }

  // Add overflow-x style to the accordion
  companiesAccordion.style.overflowX = 'auto';
  companiesAccordion.style.maxWidth = '100%';

  if (!mapping || !mapping.exit_opportunity_details || mapping.exit_opportunity_details.length === 0) {
    companiesAccordion.innerHTML = `
      <div class="alert alert-info">
        <p class="mb-0">No exit opportunity details are available for this position.</p>
      </div>
    `;
    return;
  }

  // Sort details by likelihood (1 first) then alphabetically by company name
  const sortedDetails = mapping.exit_opportunity_details.sort((a, b) => {
    if (a.likelihood !== b.likelihood) {
      return a.likelihood - b.likelihood;
    }
    return a.source_company_name.localeCompare(b.source_company_name);
  });

  // Group by target company
  const groupedDetails = sortedDetails.reduce((groups, detail) => {
    const key = detail.target_company_name;
    if (!groups[key]) groups[key] = [];
    groups[key].push(detail);
    return groups;
  }, {});

  const accordionHTML = Object.entries(groupedDetails).map(([company, details]) => `
    <div class="accordion-item">
      <h2 class="accordion-header">
        <button class="accordion-button collapsed" type="button" 
                data-bs-toggle="collapse" 
                data-bs-target="#exitCollapse${company.replace(/\s+/g, '-').toLowerCase()}">
          ${company}
        </button>
      </h2>
      <div id="exitCollapse${company.replace(/\s+/g, '-').toLowerCase()}" 
           class="accordion-collapse collapse" 
           data-bs-parent="#companiesAccordionExits">
        <div class="accordion-body p-0">
          ${details.map((detail, index) => `
            <div class="px-3 py-2 ${index !== details.length - 1 ? 'border-bottom' : ''}" style="min-width: max-content;">
              <div class="d-flex justify-content-between align-items-start mb-1">
                <div>
                  <p class="mb-1 d-flex align-items-center flex-wrap">
                    <strong>${detail.source_company_name}</strong>
                    ${detail.source_group ? ` <span class="text-secondary">&nbsp;(${detail.source_group})</span>` : ''}
                    <span class="badge ${detail.likelihood === 1 ? 'bg-primary' : ''} ms-2" 
                          style="${detail.likelihood === 2 ? 'background-color: #deebf7; color: #000;' : ''}">
                      ${detail.likelihood === 1 ? 'Strong Chance' : 'Moderate Chance'}
                    </span>
                    ${detail.description ? `
                      <span class="badge bg-light text-dark ms-2 text-wrap" style="font-weight: normal;">
                        ${detail.description}
                      </span>
                    ` : ''}
                  </p>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    </div>
  `).join('');
  
  companiesAccordion.innerHTML = accordionHTML;
}
</script>
